from pyspark.sql import SparkSession
from pyspark.sql import Row


spark = SparkSession.builder \
    .appName("Preprocess Data") \
    .getOrCreate()

df = spark.read.text("searchLog.csv")

def parsing_function(row):
    output = []
    term, url_and_clicks = row.value.split(":", 1)
    pairing = url_and_clicks.split("~")
    for pair in pairing:
        url, clicks = pair.split(":")
        output.append(Row(term=term, url=url, clicks=int(clicks)))
    return output

parsed_rdd = df.rdd.flatMap(parsing_function)
parsed_df = spark.createDataFrame(parsed_rdd)

parsed_df.repartition(parsed_df.count()).write.json("processed_data", mode="overwrite")

spark.stop()






from flask import Flask
from flask import request, jsonify
import json
import os
import pandas as pd


app = Flask(__name__)


dir_ = "processed_data"  
files = [f for f in os.listdir(dir_) if f.endswith('.json')]
dataframes = []
for file in files:
    with open(os.path.join(dir_, file), 'r') as f:
        data = json.load(f)
        tmp_df = pd.json_normalize(data)  
        dataframes.append(tmp_df)

df = pd.concat(dataframes, ignore_index=True)

df["url"] = df["url"].str.strip().str.lower()
df["term"] = df["term"].str.strip()

print(df)

@app.route('/results', methods=['POST'])
def get_results():
    input_json = request.get_json()
    term = input_json.get("term")
    filtered_df = df.loc[df['term'] == term, ["url", "clicks"]]
    sorted_df = filtered_df.sort_values(by=["clicks", "url"], ascending=[False, True])
    sorted_df['domain_type'] = sorted_df['url'].apply(lambda x: x.split('.')[-1])
    sorted_df = sorted_df.sort_values(by=["clicks", "domain_type"], ascending=[False, True])
    sorted_df = sorted_df.drop(columns=['domain_type'])
    result_dict = sorted_df.set_index('url')['clicks'].to_dict()
    return jsonify({"results": result_dict})


@app.route('/trends', methods=['POST'])
def get_trends():
    input_json = request.get_json()
    term = input_json.get("term")
    total_count = df.loc[df['term'] == term, "clicks"].sum()
    return jsonify({"clicks": int(total_count)})


@app.route('/popularity', methods=['POST'])
def get_popularity():
    input_json = request.get_json()
    url = input_json.get("url")
    total_count = df.loc[df['url'] == url, "clicks"].sum()
    return jsonify({"clicks": int(total_count)})


@app.route('/getBestTerms', methods=['POST'])
def get_best_terms():
    input_json = request.get_json()
    website = input_json.get("website")
    total_clicks = df.loc[df['url'] == website, "clicks"].sum()
    best = df.loc[df['url'] == website, ["term", "clicks"]]
    best = best[best['clicks'] > 0.05 * total_clicks]
    best_terms = best['term'].unique().tolist()
    return jsonify({"best_terms": best_terms})


if __name__ == '__main__':
    app.run(host="0.0.0.0", port=8080, debug=True)
